; Test code that aims to exercise DCPU-16 implementations
; Daniel Parnell <me@danielparnell.com> - 2012
; This work is licensed under a Creative Commons Attribution 3.0 Unported License.
;

JSR test_set
JSR test_add
JSR test_sub
JSR test_mul
JSR test_div
JSR test_mod
JSR test_stack

; YAY, ALL TESTS PASSED!
:success set PC, success

:test_set
; exercise the set instruction
SET A, 0x0001
SET B, 0x0010
SET C, 0x0100
SET X, 0x1000
SET Y, 0xffff
SET [X], C
SET Z, [X]
SET [0x0001 + X], 0x10
SET I, [0x0001 + X]
SET J, Y
SET 0, X        ; this should do nothing
:set_literal
SET 0x5555, A

IFN A, 0x01
SUB PC, 1 ; test failed
IFN B, 0x0010
SUB PC, 1 ; test failed
IFN C, 0x0100
SUB PC, 1 ; test failed
IFN X, 0x1000
SUB PC, 1 ; test failed
IFN Y, 0xffff
SUB PC, 1 ; test failed
IFN Z, C
SUB PC, 1 ; test failed
IFN I, 0x10
SUB PC, 1 ; test failed
IFN J, Y
SUB PC, 1 ; test failed
IFE 0, X
SUB PC, 1 ; test failed
IFE [0], X
SUB PC, 1 ; test failed
IFE 0x5555, A
SUB PC, 1 ; test failed
IFN [set_literal + A], A
SUB PC, 1 ; test failed

; All set tests have passed!
SET PC, POP

:test_add
; the ADD instruction
ADD [0x1000], A
ADD B, A
IFN O, 0	; make sure the Overflow flag is not set
SUB PC, 1 ; test failed
ADD X, Y
IFE O, 0	; make sure the Overflow flag is set this time
SUB PC, 1 ; test failed
INF X, 0x0fff
SUB PC, 1 ; test failed
ADD [set_literal + A], B
:add_2_literals
ADD 0xbeef, 0xfeed	; this seems like a silly thing to do, but the spec allows it

IFN [0x1000], 0x0101
SUB PC, 1 ; test failed
IFN B, 0x0011
SUB PC, 1 ; test failed
IFN 0x0012, [set_literal + A]
SUB PC, 1 ; test failed
IFN 0xbddc, [add_2_literals + A]
SUB PC, 1 ; test failed

; add tests passed
SET PC, POP

:test_sub
; the SUB instruction
SUB B, X	; B should = 0x12 and X should be 0xffff
IFN 0x13, X	; so the subtraction should behave like and ADD
SUB PC, 1 ; test failed

SET X, 0x06
SUB X, 0x0a
IFN X, 0xfffc
SUB PC, 1 ; test failed
IFN O, 0xffff
SUB PC, 1 ; test failed

SET X, 0x1000
SUB X, 0x00ff
IFN X, 0x0f01
SUB PC, 1 ; test failed
IFN O, 0
SUB PC, 1 ; test failed

SUB 0x01, 0x01	; should do nothing except set the O flag to 0
IFN O, 0
SUB PC, 1 ; test failed
IFE [0x01], 0
SUB PC, 1 ; test failed

SUB 0x01, 0x02	; should also do nothing but set the O flag to 0xffff
IFN O, 0xffff
SUB PC, 1 ; test failed
IFE [0x01], 0xffff
SUB PC, 1 ; test failed

SET PC, test_sub2	; jump over the next instruction

SET PC, test_sub3	; jump to the return instruction

:test_sub2
SUB PC, 3		; branch back to the jump to the return

; subtraction tests passed :)
:test_sub3
SET PC, POP

:test_mul
; multiplication tests
SET X, 0x01
SET Y, 0x5555
MUL X, Y
IFN X, 0x5555
SUB PC, 1 ; test failed
IFN O, 0
SUB PC, 1 ; test failed

SET Z, 0x6666
MUL Z, Y
IFN Z, 0xddde
SUB PC, 1 ; test failed
IFN O, 0x2221
SUB PC, 1 ; test failed

SET B, 0
MUL B, X
IFN B, 0
SUB PC, 1 ; test failed
IFN O, 0
SUB PC, 1 ; test failed

; multiplication tests passed :)
SET PC, POP

:test_div
SET A, 100
DIV A, 0
IFN A, 0
SUB PC, 1 ; test failed
IFN O, 0
SUB PC, 1 ; test failed

SET A, 100
DIV A, 2
IFN A, 50
SUB PC, 1 ; test failed
IFN O, 0
SUB PC, 1 ; test failed

SET A, 0x99
DIV A, 0x00cc
IFN A, 0
SUB PC, 1 ; test failed
IFN O, 0xc000
SUB PC, 1 ; test failed

; division tests passed :)
SET PC, POP

:test_mod
SET A, 10
SET B, 0
MOD A, B
IFN A, 0
SUB PC, 1 ; test failed

SET A, 10
MOD A, 7
IFN A, 3
SUB PC, 1 ; test failed

; mod tests passed :)
SET PC, POP

:test_stack
SET A, 9876
SET B, 0
SET PUSH, A
IFN PEEK, 9876
SUB PC, 1 ; test failed
SET B, POP
IFN B, 9876
SUB PC, 1 ; test failed
; stack operations test passed :)
SET PC, POP
